// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @unique @default(uuid())
  username   String       @unique
  password   String
  apiURL     String
  streamURL  String
  accessKey  String
  secretKey  String
  Order      Order[]
  updatedAt  DateTime     @default(now()) @updatedAt
  createdAt  DateTime     @default(now())
  Symbol     Symbol[]
  Monitor    Monitor[]
  Automation Automation[]

  @@map("users")
}

model Symbol {
  id             String   @id @unique @default(uuid())
  symbol         String   @unique
  base           String
  quote          String
  basePrecision  Int
  quotePrecision Int
  minNotional    String
  minLotSize     String
  isFavorite     Boolean  @default(false)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt      DateTime @default(now()) @updatedAt
  createdAt      DateTime @default(now())

  @@index([userId], map: "user_id")
  @@map("Symbols")
}

model Order {
  id              String   @id @unique @default(uuid())
  automationId    String?
  symbol          String
  orderId         Int      @unique
  clientOrderId   String   @unique
  transactionTime String
  type            String
  side            String
  quantity        String
  status          String
  icebergQuantity String?
  obs             String?
  limitPrice      String?
  stopPrice       String?
  avgPrice        String?
  comission       String?
  net             String?
  isMaker         Boolean  @default(false)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt       DateTime @default(now()) @updatedAt
  createdAt       DateTime @default(now())

  @@index([symbol])
  @@map("Orders")
}

model Monitor {
  id              String   @id @unique @default(uuid())
  symbol          String   @default("*")
  type            String
  isActive        Boolean  @default(false)
  isSystemMonitor Boolean  @default(false)
  showLogs        Boolean  @default(false)
  broadcastLabel  String?
  interval        String?
  indexes         String?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt       DateTime @default(now()) @updatedAt
  createdAt       DateTime @default(now())

  @@unique([type, symbol, interval, userId])
  @@index([symbol])
  @@map("Monitors")
}

model Automation {
  id         String   @id @unique @default(uuid())
  name       String
  symbol     String
  indexes    String
  conditions String
  isActive   Boolean  @default(false)
  showLogs   Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt  DateTime @default(now()) @updatedAt
  createdAt  DateTime @default(now())

  @@unique([name, symbol, userId])
  @@map("Automations")
}
